name: Deploy to Railway Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual staging deployment'
      trigger_security_scan:
        description: 'Trigger APIsec security scan after deployment'
        required: false
        default: true
        type: boolean

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    outputs:
      deployment_success: ${{ steps.verify_deployment.outputs.deployment_success }}
    
    steps:
    - name: 📋 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Install Railway CLI
      run: |
        echo "::group::🔧 Installing Railway CLI"
        echo "🔧 Installing Railway CLI..."
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH
        echo "✅ Railway CLI installation complete"
        echo "::endgroup::"
        
    - name: ✅ Verify Railway CLI installation
      run: |
        echo "::group::✅ Verifying Railway CLI"
        echo "🔍 Verifying Railway CLI..."
        railway --version
        echo "✅ Railway CLI verified"
        echo "::endgroup::"
      
    - name: 🔐 Test Railway Authentication
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}
      run: |
        echo "::group::🔐 Testing Railway Authentication"
        echo "🔐 Testing Railway authentication..."
        if [ -z "$RAILWAY_TOKEN" ]; then
          echo "::error title=Auth Failed::RAILWAY_TOKEN_STAGING is not set or empty"
          exit 1
        fi
        echo "::notice title=Auth Success::RAILWAY_TOKEN_STAGING is configured"
        railway whoami || echo "⚠️ Authentication test failed, but continuing..."
        echo "::endgroup::"
        
    - name: 🚀 Deploy to Railway Staging
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}
      run: |
        echo "::group::🚀 Railway Deployment"
        echo "🚀 Starting Railway deployment..."
        echo "Setting environment to staging..."
        railway environment staging
        echo "Setting service..."
        railway service e24b40e8-1586-4fe9-9dea-35661be40df7
        echo "Starting deployment..."
        railway up --detach
        echo "✅ Deployment command completed"
        echo "::endgroup::"
        
    - name: ⏳ Wait for deployment
      run: |
        echo "::group::⏳ Deployment Processing"
        echo "⏳ Waiting 30 seconds for deployment to process..."
        sleep 30
        echo "✅ Wait period complete"
        echo "::endgroup::"
      
    - name: 🔍 Verify staging deployment
      id: verify_deployment
      run: |
        echo "::group::🔍 Deployment Verification"
        echo "🔍 Testing staging deployment..."
        
        # Test main endpoint
        if curl -f https://urban-vampi-staging.up.railway.app/; then
          echo "✅ Main endpoint accessible"
          MAIN_STATUS="success"
        else
          echo "::error title=Main Endpoint Failed::Main endpoint not accessible"
          MAIN_STATUS="failed"
        fi
        
        # Test deployment test endpoint (optional)
        if curl -f https://urban-vampi-staging.up.railway.app/deployment-test; then
          echo "✅ Deployment test endpoint accessible"
          TEST_STATUS="success"
        else
          echo "::warning title=Test Endpoint::Deployment test endpoint not accessible (may be expected)"
          TEST_STATUS="warning"
        fi
        
        # Overall deployment status - be more lenient for now
        if [ "$MAIN_STATUS" == "success" ]; then
          echo "::notice title=Deployment Success::Staging deployment successful and ready for security scanning"
          echo "deployment_success=true" >> $GITHUB_OUTPUT
        else
          echo "::error title=Deployment Failed::Staging deployment verification failed"
          echo "deployment_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "::endgroup::"
        
    - name: 📋 Deployment Summary
      run: |
        echo "::group::📋 Deployment Summary"
        echo "## 🚀 Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: develop" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://urban-vampi-staging.up.railway.app" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Security scan will be triggered in next job" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 Results will be available in the APIsec workflow" >> $GITHUB_STEP_SUMMARY
        echo "::endgroup::"

  trigger-apisec-scan:
    name: Trigger APIsec Security Scan
    runs-on: ubuntu-latest
    needs: deploy-staging
    # Only run if deployment succeeded AND scan wasn't explicitly disabled
    if: needs.deploy-staging.outputs.deployment_success == 'true' && github.event.inputs.trigger_security_scan != 'false'
    
    steps:
    - name: 📋 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Debug Information
      run: |
        echo "::group::🔍 Trigger Information"
        echo "Deployment success: ${{ needs.deploy-staging.outputs.deployment_success }}"
        echo "Event name: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Trigger scan input: ${{ github.event.inputs.trigger_security_scan }}"
        echo "Repository: ${{ github.repository }}"
        echo "::endgroup::"
      
    - name: 🔒 Trigger APIsec Security Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "::group::🔒 Triggering APIsec Security Scan"
        echo "🔒 Triggering your custom APIsec security scan workflow..."
        
        # Trigger your apisec-security-scan.yml workflow
        RESPONSE=$(curl -w "%{http_code}" -s -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          "${{ github.api_url }}/repos/${{ github.repository }}/actions/workflows/apisec-security-scan.yml/dispatches" \
          -d '{
            "ref": "${{ github.ref_name }}",
            "inputs": {
              "force_scan": "true"
            }
          }')
        
        HTTP_CODE="${RESPONSE: -3}"
        RESPONSE_BODY="${RESPONSE%???}"
        
        echo "HTTP Response Code: $HTTP_CODE"
        
        if [ "$HTTP_CODE" == "204" ]; then
          echo "::notice title=APIsec Triggered::✅ The APIsec security scan workflow has been triggered"
          echo "🔗 Check the Actions tab for 'APIsec Security Scan' workflow"
        else
          echo "::warning title=Trigger Issue::HTTP $HTTP_CODE response when triggering APIsec workflow"
          echo "Response: $RESPONSE_BODY"
          
          echo "::group::📋 Troubleshooting"
          echo "If this failed, possible reasons:"
          echo "1. apisec-security-scan.yml doesn't have workflow_dispatch trigger"
          echo "2. File name mismatch"
          echo "3. Permissions issue"
          echo ""
          echo "You can manually trigger the APIsec scan from the Actions tab"
          echo "::endgroup::"
        fi
        echo "::endgroup::"
        
    - name: 📊 Summary
      run: |
        echo "## 🔒 APIsec Scan Trigger Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment**: ✅ Completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: https://urban-vampi-staging.up.railway.app" >> $GITHUB_STEP_SUMMARY
        echo "- **APIsec Trigger**: Attempted to trigger your custom workflow" >> $GITHUB_STEP_SUMMARY
        echo "- **Monitor**: Check Actions tab for 'APIsec Security Scan'" >> $GITHUB_STEP_SUMMARY