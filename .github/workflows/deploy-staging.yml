name: Deploy to Railway Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual staging deployment'
      trigger_security_scan:
        description: 'Trigger APIsec security scan after deployment'
        required: false
        default: true
        type: boolean

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    outputs:
      deployment_success: ${{ steps.verify_deployment.outputs.deployment_success }}
      deployment_url: ${{ steps.verify_deployment.outputs.deployment_url }}
    
    steps:
    - name: üìã Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Install Railway CLI
      run: |
        echo "::group::üîß Installing Railway CLI"
        echo "üîß Installing Railway CLI..."
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH
        echo "‚úÖ Railway CLI installation complete"
        echo "::endgroup::"
        
    - name: ‚úÖ Verify Railway CLI installation
      run: |
        echo "::group::‚úÖ Verifying Railway CLI"
        echo "üîç Verifying Railway CLI..."
        railway --version
        echo "‚úÖ Railway CLI verified"
        echo "::endgroup::"
      
    - name: üîê Test Railway Authentication
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}
      run: |
        echo "::group::üîê Testing Railway Authentication"
        echo "üîê Testing Railway authentication..."
        if [ -z "$RAILWAY_TOKEN" ]; then
          echo "::error title=Auth Failed::RAILWAY_TOKEN_STAGING is not set or empty"
          exit 1
        fi
        echo "::notice title=Auth Success::RAILWAY_TOKEN_STAGING is configured"
        railway whoami || echo "‚ö†Ô∏è Authentication test failed, but continuing..."
        echo "::endgroup::"
        
    - name: üöÄ Deploy to Railway Staging
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}
      run: |
        echo "::group::üöÄ Railway Deployment"
        echo "üöÄ Starting Railway deployment..."
        echo "Setting environment to staging..."
        railway environment staging
        echo "Setting service..."
        railway service e24b40e8-1586-4fe9-9dea-35661be40df7
        echo "Starting deployment..."
        railway up --detach
        echo "‚úÖ Deployment command completed"
        echo "::endgroup::"
        
    - name: ‚è≥ Wait for deployment
      run: |
        echo "::group::‚è≥ Deployment Processing"
        echo "‚è≥ Waiting 30 seconds for deployment to process..."
        sleep 30
        echo "‚úÖ Wait period complete"
        echo "::endgroup::"
      
    - name: üîç Verify staging deployment
      id: verify_deployment
      run: |
        echo "::group::üîç Deployment Verification"
        echo "üîç Testing staging deployment..."
        
        DEPLOYMENT_URL="https://urban-vampi-staging.up.railway.app"
        
        # Test main endpoint
        if curl -f -s --max-time 10 "$DEPLOYMENT_URL/"; then
          echo "‚úÖ Main endpoint accessible"
          MAIN_STATUS="success"
        else
          echo "::error title=Main Endpoint Failed::Main endpoint not accessible"
          MAIN_STATUS="failed"
        fi
        
        # Test deployment test endpoint (optional)
        if curl -f -s --max-time 10 "$DEPLOYMENT_URL/deployment-test"; then
          echo "‚úÖ Deployment test endpoint accessible"
          TEST_STATUS="success"
        else
          echo "::warning title=Test Endpoint::Deployment test endpoint not accessible (may be expected)"
          TEST_STATUS="warning"
        fi
        
        # Set outputs regardless of endpoint status for debugging
        echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        
        # Overall deployment status
        if [ "$MAIN_STATUS" == "success" ]; then
          echo "::notice title=Deployment Success::Staging deployment successful and ready for security scanning"
          echo "deployment_success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Setting deployment_success=true"
        else
          echo "::error title=Deployment Failed::Staging deployment verification failed"
          echo "deployment_success=false" >> $GITHUB_OUTPUT
          echo "‚ùå Setting deployment_success=false"
          # Don't exit here - let's see if we can still trigger the scan for debugging
        fi
        
        echo "::endgroup::"
        
    - name: üìã Deployment Summary
      run: |
        echo "::group::üìã Deployment Summary"
        echo "## üöÄ Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: develop" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://urban-vampi-staging.up.railway.app" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ steps.verify_deployment.outputs.deployment_success == 'true' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- üîí Security scan trigger: ${{ steps.verify_deployment.outputs.deployment_success == 'true' && 'Will be triggered' || 'Skipped due to deployment failure' }}" >> $GITHUB_STEP_SUMMARY
        echo "- üìä Results will be available in the APIsec workflow" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Debug Information" >> $GITHUB_STEP_SUMMARY
        echo "- **deployment_success output**: \`${{ steps.verify_deployment.outputs.deployment_success }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Event type**: \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **trigger_security_scan input**: \`${{ github.event.inputs.trigger_security_scan || 'default (true for push events)' }}\`" >> $GITHUB_STEP_SUMMARY
        echo "::endgroup::"

  debug-conditions:
    name: Debug Trigger Conditions
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always()
    
    steps:
    - name: üîç Debug Conditional Logic
      run: |
        echo "::group::üîç Debugging Trigger Conditions"
        echo "=== CONDITION ANALYSIS ==="
        echo "Event name: ${{ github.event_name }}"
        echo "Deployment success: ${{ needs.deploy-staging.outputs.deployment_success }}"
        echo "Trigger input (manual): ${{ github.event.inputs.trigger_security_scan }}"
        echo "Trigger input != 'false': ${{ github.event.inputs.trigger_security_scan != 'false' }}"
        echo ""
        echo "=== CONDITION EVALUATION ==="
        echo "always(): true (always evaluates to true)"
        echo "needs.deploy-staging.outputs.deployment_success == 'true': ${{ needs.deploy-staging.outputs.deployment_success == 'true' }}"
        echo "github.event.inputs.trigger_security_scan != 'false': ${{ github.event.inputs.trigger_security_scan != 'false' }}"
        echo ""
        echo "=== OVERALL RESULT ==="
        SHOULD_TRIGGER="${{ always() && needs.deploy-staging.outputs.deployment_success == 'true' && (github.event.inputs.trigger_security_scan != 'false') }}"
        echo "Should trigger security scan: $SHOULD_TRIGGER"
        
        if [ "$SHOULD_TRIGGER" == "true" ]; then
          echo "::notice title=Trigger Decision::‚úÖ Security scan should be triggered"
        else
          echo "::warning title=Trigger Decision::‚ùå Security scan will be skipped"
          echo "::group::üõ†Ô∏è Troubleshooting"
          echo "Possible reasons for skipping:"
          echo "1. Deployment verification failed (deployment_success != 'true')"
          echo "2. Manual trigger was explicitly set to false"
          echo "3. Event type mismatch"
          echo "::endgroup::"
        fi
        echo "::endgroup::"

  trigger-security-scan:
    name: Trigger APIsec Security Scan
    runs-on: ubuntu-latest
    needs: deploy-staging
    # Simplified condition for easier debugging
    if: always() && (needs.deploy-staging.outputs.deployment_success == 'true') && (github.event.inputs.trigger_security_scan != 'false')
    
    steps:
    - name: üìã Checkout code
      uses: actions/checkout@v4
      
    - name: üîí Trigger APIsec Security Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "::group::üîí Triggering APIsec Security Scan"
        echo "üîí Triggering APIsec security scan workflow..."
        echo "Target branch: ${{ github.ref_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "API URL: ${{ github.api_url }}"
        
        # Trigger the APIsec workflow using GitHub API
        RESPONSE=$(curl -w "%{http_code}" -s -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          "${{ github.api_url }}/repos/${{ github.repository }}/actions/workflows/apisec-security-scan.yml/dispatches" \
          -d '{
            "ref": "${{ github.ref_name }}",
            "inputs": {
              "force_scan": "true"
            }
          }')
        
        HTTP_CODE="${RESPONSE: -3}"
        RESPONSE_BODY="${RESPONSE%???}"
        
        echo "HTTP Response Code: $HTTP_CODE"
        echo "Response Body: $RESPONSE_BODY"
        
        if [ "$HTTP_CODE" == "204" ]; then
          echo "::notice title=Scan Triggered::‚úÖ APIsec security scan has been triggered successfully"
          echo "üîó Check the Actions tab to monitor the security scan progress"
        else
          echo "::error title=Trigger Failed::‚ùå Failed to trigger APIsec security scan (HTTP $HTTP_CODE)"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi
        echo "::endgroup::"
        
    - name: üìä Security Scan Summary
      run: |
        echo "::group::üìä Security Scan Information"
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üîí Security Scan Triggered" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Target** | \`${{ needs.deploy-staging.outputs.deployment_url }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Workflow** | APIsec Security Scan |" >> $GITHUB_STEP_SUMMARY
        echo "| **Triggered At** | $(date -u) |" >> $GITHUB_STEP_SUMMARY
        echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Force Scan** | \`true\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîç Monitor Progress" >> $GITHUB_STEP_SUMMARY
        echo "- Visit the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions) to monitor scan progress" >> $GITHUB_STEP_SUMMARY
        echo "- Look for the \"APIsec Security Scan\" workflow" >> $GITHUB_STEP_SUMMARY
        echo "- Results will include vulnerability details and security reports" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Expected Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Mock Scan**: Simulated vulnerabilities for demo purposes" >> $GITHUB_STEP_SUMMARY
        echo "- **Live Scan**: Real APIsec analysis (if credentials configured)" >> $GITHUB_STEP_SUMMARY
        echo "- **Report Generation**: Detailed security findings and recommendations" >> $GITHUB_STEP_SUMMARY
        echo "::endgroup::"