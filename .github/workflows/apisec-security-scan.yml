name: APIsec Security Scan

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_scan:
        description: 'Force APIsec scan'
        required: false
        default: true
        type: boolean

env:
  VAMPI_URL: https://urban-vampi-staging.up.railway.app
  APISEC_APP_NAME: vampi-demo
  FALLBACK_TO_MOCK: true

jobs:
  apisec-security-scan:
    runs-on: ubuntu-latest
    name: APIsec Security Scan
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: |
          echo "üì¶ Installing APIsec scanning dependencies..."
          npm install axios dotenv
          
      - name: Load Environment Variables
        run: |
          if [ -f .env ]; then
            echo "üìÑ Loading environment variables from .env file..."
            set -a
            source .env
            set +a
            cat .env | grep -v '^#' | grep '=' >> $GITHUB_ENV
            echo "‚úÖ Environment variables loaded"
          else
            echo "‚ö†Ô∏è  No .env file found - using workflow defaults"
          fi
          
      - name: Validate Environment
        run: |
          echo "üîç Validating APIsec configuration..."
          echo "Target URL: ${VAMPI_URL}"
          echo "App Name: ${APISEC_APP_NAME}"
          
          if [ -z "${{ secrets.APISEC_API_KEY }}" ]; then
            echo "‚ö†Ô∏è  APISEC_API_KEY not configured - will use mock scan"
          else
            echo "‚úÖ APIsec credentials available"
          fi
          
      - name: Test API Availability
        run: |
          echo "üîç Testing Vampi API availability..."
          curl -f ${VAMPI_URL}/health || curl -f ${VAMPI_URL}/ || {
            echo "‚ùå Vampi API is not accessible at ${VAMPI_URL}"
            exit 1
          }
          echo "‚úÖ Vampi API is accessible"
          
      - name: Run APIsec Security Scan
        env:
          APISEC_API_KEY: ${{ secrets.APISEC_API_KEY }}
          APISEC_APPLICATION_ID: ${{ secrets.APISEC_APPLICATION_ID }}
          APISEC_INSTANCE_ID: ${{ secrets.APISEC_INSTANCE_ID }}
          MEDUSA_URL: ${{ env.VAMPI_URL }}
        run: |
          echo "üîí Starting APIsec security scan..."
          
          if [ -n "${{ secrets.APISEC_API_KEY }}" ]; then
            echo "üöÄ Running live APIsec scan..."
            node scripts/apisec-scan.js
          else
            echo "üé≠ Running mock APIsec scan..."
            node scripts/apisec-mock-scan.js
          fi
          
      - name: Parse Scan Results
        run: |
          echo "üìä Processing scan results..."
          if [ -f scan-results.json ]; then
            echo "‚úÖ Scan results found"
            node scripts/parse-scan-results.js
          else
            echo "‚ùå No scan results file found"
            exit 1
          fi
          
      - name: Generate Security Report
        run: |
          echo "# üîí Vampi APIsec Security Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** ${VAMPI_URL}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** develop" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f scan-results.json ]; then
            echo "## üìä Scan Results" >> $GITHUB_STEP_SUMMARY
            
            CRITICAL=$(node -e "console.log(require('./scan-results.json').summary.critical_severity || 0)")
            HIGH=$(node -e "console.log(require('./scan-results.json').summary.high_severity || 0)")
            MEDIUM=$(node -e "console.log(require('./scan-results.json').summary.medium_severity || 0)")
            LOW=$(node -e "console.log(require('./scan-results.json').summary.low_severity || 0)")
            
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Medium | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
            echo "| Low | $LOW |" >> $GITHUB_STEP_SUMMARY
            
            if [ "$CRITICAL" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üö® **Critical vulnerabilities found!**" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
      - name: Check Critical Vulnerabilities
        run: |
          if [ -f scan-results.json ]; then
            CRITICAL_COUNT=$(node -e "console.log(require('./scan-results.json').summary.critical_severity || 0)")
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "üö® Critical vulnerabilities found: $CRITICAL_COUNT"
              echo "‚ùå Failing build due to critical security issues"
              exit 1
            fi
            
            echo "‚úÖ No critical vulnerabilities found"
          fi
          
      - name: Upload Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: vampi-apisec-scan-results-${{ github.run_number }}
          path: |
            scan-results.json
            scan-report.md
          retention-days: 30